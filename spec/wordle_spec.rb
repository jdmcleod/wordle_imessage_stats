
require_relative '../source/wordle'
require_relative '../source/guess'

RSpec.describe Wordle do
  describe '#green_errors' do
    let(:date) { DateTime.now }
    let(:person) { 'Test Person' }
    let(:wordle_number) { '123' }

    def create_wordle_with_guesses(guess_patterns)
      data = guess_patterns.join("\n")
      Wordle.new(person, wordle_number, date, data)
    end

    it 'returns 0 when there is only one guess' do
      wordle = create_wordle_with_guesses(['â¬œâ¬œðŸŸ©â¬œâ¬œ'])
      expect(wordle.green_errors).to eq(0)
    end

    it 'returns 0 when there are no guesses' do
      wordle = create_wordle_with_guesses([])
      expect(wordle.green_errors).to eq(0)
    end

    it 'counts one error when a green becomes non-green in next guess' do
      wordle = create_wordle_with_guesses([
        'â¬œâ¬œðŸŸ©â¬œâ¬œ',
        'â¬œâ¬œâ¬œâ¬œâ¬œ'
      ])
      expect(wordle.green_errors).to eq(1)
    end

    it 'counts multiple errors when multiple greens become non-green' do
      wordle = create_wordle_with_guesses([
        'ðŸŸ©ðŸŸ©ðŸŸ©â¬œâ¬œ',
        'â¬œâ¬œðŸŸ©â¬œâ¬œ'
      ])
      expect(wordle.green_errors).to eq(2)
    end

    it 'accumulates errors across multiple guesses' do
      wordle = create_wordle_with_guesses([
        'ðŸŸ©â¬œðŸŸ©â¬œâ¬œ',  # Two greens
        'â¬œâ¬œðŸŸ©â¬œâ¬œ',  # Lost one green (1 error)
        'â¬œâ¬œâ¬œâ¬œâ¬œ'   # Lost another green (1 more error)
      ])
      expect(wordle.green_errors).to eq(2)
    end

    it 'ignores when non-green becomes green' do
      wordle = create_wordle_with_guesses([
        'â¬œâ¬œâ¬œâ¬œâ¬œ',
        'ðŸŸ©ðŸŸ©ðŸŸ©â¬œâ¬œ'
      ])
      expect(wordle.green_errors).to eq(0)
    end

    it 'handles mixed patterns correctly' do
      wordle = create_wordle_with_guesses([
        'ðŸŸ©â¬œðŸŸ©â¬œðŸŸ©',  # Three greens
        'ðŸŸ©â¬œâ¬œðŸŸ©ðŸŸ©',  # Lost one green, gained one (1 error)
        'ðŸŸ©ðŸŸ©â¬œâ¬œðŸŸ©'   # Lost one green, gained one (1 error)
      ])
      expect(wordle.green_errors).to eq(2)
    end
  end
end
